name: Cross-Browser Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'

env:
  NODE_VERSION: '18'
  SELENIUM_HUB_URL: http://localhost:4444/wd/hub

jobs:
  cross-browser-test:
    name: Cross-Browser Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        browser: [chrome, firefox, edge]

    services:
      selenium-hub:
        image: selenium/hub:latest
        ports:
          - 4442:4442
          - 4443:4443
          - 4444:4444
        env:
          GRID_MAX_SESSION: 16
          GRID_BROWSER_TIMEOUT: 300
          GRID_TIMEOUT: 300

      selenium-chrome:
        image: selenium/node-chrome:latest
        env:
          HUB_HOST: selenium-hub
          HUB_PORT: 4444
          NODE_MAX_INSTANCES: 4
          NODE_MAX_SESSION: 4
        volumes:
          - /dev/shm:/dev/shm
        options: --shm-size=2g

      selenium-firefox:
        image: selenium/node-firefox:latest
        env:
          HUB_HOST: selenium-hub
          HUB_PORT: 4444
          NODE_MAX_INSTANCES: 4
          NODE_MAX_SESSION: 4
        volumes:
          - /dev/shm:/dev/shm
        options: --shm-size=2g

      selenium-edge:
        image: selenium/node-edge:latest
        env:
          HUB_HOST: selenium-hub
          HUB_PORT: 4444
          NODE_MAX_INSTANCES: 2
          NODE_MAX_SESSION: 2
        volumes:
          - /dev/shm:/dev/shm
        options: --shm-size=2g

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps
          # Install additional browser drivers if needed
          npx selenium-webdriver install

      - name: Build application
        run: npm run build

      - name: Start application server
        run: |
          npm start &
          # Wait for the server to be ready
          npx wait-on http://localhost:3000 --timeout 60000
        env:
          PORT: 3000

      - name: Wait for Selenium Grid
        run: |
          # Wait for Selenium Hub to be ready
          timeout 60 bash -c 'until curl -f http://localhost:4444/wd/hub/status; do echo "Waiting for Selenium Grid..."; sleep 2; done'

      - name: Check Selenium Grid Status
        run: |
          curl -s http://localhost:4444/wd/hub/status | jq '.'
          echo "Available nodes:"
          curl -s http://localhost:4444/grid/api/proxy | jq '.request.configuration.nodes'

      - name: Run browser compatibility check
        run: npm run test:compatibility

      - name: Run cross-browser tests
        run: npm run test:cross-browser
        env:
          SELENIUM_HUB_URL: ${{ env.SELENIUM_HUB_URL }}
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cross-browser-test-results-${{ matrix.browser }}
          path: |
            test-results/
            !test-results/node_modules/
          retention-days: 7

      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cross-browser-screenshots-${{ matrix.browser }}
          path: test-results/cross-browser-screenshots/
          retention-days: 7

      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const reportFiles = fs.readdirSync('test-results').filter(f => f.startsWith('cross-browser-report-'));
              if (reportFiles.length === 0) {
                console.log('No test report found');
                return;
              }
              
              const reportPath = path.join('test-results', reportFiles[0]);
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              
              const body = `
            ## 🌐 Cross-Browser Test Results
            
            **Browser**: ${{ matrix.browser }}
            **Total Tests**: ${report.totalTests}
            **✅ Passed**: ${report.passed}
            **❌ Failed**: ${report.failed}
            **⏱️ Duration**: ${report.duration}
            
            ${report.failed > 0 ? `
            ### Failed Tests:
            ${report.results.filter(r => r.status === 'failed').map(r => `- **${r.test}**: ${r.error || 'Unknown error'}`).join('\n')}
            ` : '### All tests passed! 🎉'}
            
            <details>
            <summary>View detailed results</summary>
            
            ${report.results.map(r => `
            **${r.test}** (${r.browser}): ${r.status === 'passed' ? '✅' : '❌'} ${r.status}
            ${r.error ? `Error: \`${r.error}\`` : ''}
            `).join('\n')}
            
            </details>
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } catch (error) {
              console.error('Error posting comment:', error);
            }

  browser-compatibility-matrix:
    name: Browser Compatibility Matrix
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Generate compatibility matrix
        run: |
          npm run test:compatibility > compatibility-matrix.txt
          cat compatibility-matrix.txt

      - name: Upload compatibility matrix
        uses: actions/upload-artifact@v4
        with:
          name: browser-compatibility-matrix
          path: compatibility-matrix.txt
          retention-days: 30

  performance-regression:
    name: Cross-Browser Performance Check
    runs-on: ubuntu-latest
    needs: cross-browser-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          pattern: cross-browser-test-results-*
          merge-multiple: true
          path: test-results/

      - name: Analyze performance across browsers
        run: |
          echo "Analyzing cross-browser performance..."
          node -e "
            const fs = require('fs');
            const reports = fs.readdirSync('test-results')
              .filter(f => f.startsWith('cross-browser-report-'))
              .map(f => JSON.parse(fs.readFileSync(\`test-results/\${f}\`, 'utf8')));
            
            console.log('Cross-Browser Performance Summary:');
            reports.forEach(report => {
              console.log(\`Browser: \${report.browsers} browsers tested\`);
              console.log(\`Duration: \${report.duration}\`);
              console.log(\`Success Rate: \${(report.passed/report.totalTests*100).toFixed(1)}%\`);
              console.log('---');
            });
          "

      - name: Check for performance regressions
        run: |
          echo "Checking for performance regressions..."
          # This could compare against baseline performance metrics
          # For now, we'll just validate that all tests completed within reasonable time
          node -e "
            const fs = require('fs');
            const reports = fs.readdirSync('test-results')
              .filter(f => f.startsWith('cross-browser-report-'))
              .map(f => JSON.parse(fs.readFileSync(\`test-results/\${f}\`, 'utf8')));
            
            const maxDuration = 300; // 5 minutes max
            const slowReports = reports.filter(r => parseFloat(r.duration) > maxDuration);
            
            if (slowReports.length > 0) {
              console.error('Performance regression detected!');
              slowReports.forEach(r => console.error(\`Slow report: \${r.duration}\`));
              process.exit(1);
            } else {
              console.log('No performance regressions detected.');
            }
          "