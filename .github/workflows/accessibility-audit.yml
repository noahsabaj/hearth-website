name: Accessibility Audit

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  accessibility-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
      
    - name: Build application
      run: npm run build
      
    - name: Serve application
      run: |
        npm install -g serve
        serve -s build -l 3000 &
        sleep 10
        
    - name: Run Lighthouse CI Accessibility Audit
      run: |
        npm install -g @lhci/cli
        lhci autorun --config=./lighthouserc.js
        
    - name: Run Pa11y Accessibility Tests
      run: |
        npm install -g pa11y
        pa11y http://localhost:3000 --standard WCAG2AA --reporter json > pa11y-results.json || true
        cat pa11y-results.json
        
    - name: Run axe-core Tests
      run: |
        npm install -g @axe-core/cli
        axe http://localhost:3000 --tags wcag2a,wcag2aa --reporter json > axe-results.json || true
        cat axe-results.json
        
    - name: Generate Accessibility Report
      run: |
        node scripts/generate-a11y-report.js
        
    - name: Upload Accessibility Results
      uses: actions/upload-artifact@v4
      with:
        name: accessibility-results
        path: |
          pa11y-results.json
          axe-results.json
          accessibility-report.html
          
    - name: Comment PR with Accessibility Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const axeResults = JSON.parse(fs.readFileSync('axe-results.json', 'utf8'));
            const pa11yResults = JSON.parse(fs.readFileSync('pa11y-results.json', 'utf8'));
            
            const violations = axeResults.violations || [];
            const pa11yIssues = pa11yResults.issues || [];
            
            const comment = `
            ## üîç Accessibility Audit Results
            
            ### axe-core Results
            - **Violations**: ${violations.length}
            - **Passes**: ${axeResults.passes?.length || 0}
            - **Inapplicable**: ${axeResults.inapplicable?.length || 0}
            
            ### Pa11y Results  
            - **Issues**: ${pa11yIssues.length}
            
            ${violations.length === 0 && pa11yIssues.length === 0 
              ? '‚úÖ **No accessibility violations found!**' 
              : '‚ö†Ô∏è **Accessibility issues detected. Please review the artifacts.**'
            }
            
            View detailed results in the workflow artifacts.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not parse accessibility results:', error);
          }